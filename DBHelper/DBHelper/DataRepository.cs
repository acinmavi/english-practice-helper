/*
	This code was generated by SQL Compact Code Generator version 1.3.0.7

	SQL Compact Code Generator was written by Christian Resma Helle (http://sqlcecodegen.codeplex.com)
	and is under the GNU General Public License version 2 (GPLv2)

	Generated: 07/13/2013 19:59:21
*/



namespace DBHelper
{
	/// <summary>
	/// Main Data Repository implementation containing all default table repositories implementations
	/// </summary>
	public partial class DataRepository : IDataRepository
	{
		private System.Data.SqlServerCe.SqlCeTransaction transaction = null;

		/// <summary>
		/// Creates an instance of DataRepository
		/// </summary>
		public DataRepository()
		{
			EnglishSentences = new EnglishSentencesRepository();
		}

		/// <summary>
		/// Gets an instance of the IEnglishSentencesRepository
		/// </summary>
		public IEnglishSentencesRepository EnglishSentences { get; private set; }

		/// <summary>
		/// Starts a SqlCeTransaction using the global SQL CE Conection instance
		/// </summary>
		public System.Data.SqlServerCe.SqlCeTransaction BeginTransaction()
		{
			if (transaction != null)
				throw new System.InvalidOperationException("A transaction has already been started. Only one transaction is allowed");
			transaction = EntityBase.Connection.BeginTransaction();
			EnglishSentences.Transaction = transaction;
			return transaction;
		}

		/// <summary>
		/// Commits the transaction
		/// </summary>
		public void Commit()
		{
			if (transaction == null)
				throw new System.InvalidOperationException("No transaction has been started");
			transaction.Commit();
		}

		/// <summary>
		/// Rollbacks the transaction
		/// </summary>
		public void Rollback()
		{
			if (transaction == null)
				throw new System.InvalidOperationException("No transaction has been started");
			transaction.Rollback();
		}

		/// <summary>
		/// Releases the resources used. All uncommitted transactions are rolled back
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
		}

		protected void Dispose(bool disposing)
		{
			if (disposed) return;
			if (disposing)
			{
				if (transaction != null)
				{
					transaction.Dispose();
					transaction = null;
				}
			}
			disposed = true;
		}

		private bool disposed = false;

		~DataRepository()
		{
			Dispose(false);
		}
	}
}

